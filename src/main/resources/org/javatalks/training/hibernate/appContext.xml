<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
  <context:property-placeholder location="/org/javatalks/training/hibernate/env/${dbname:hsqldb}.properties"/>

  <!--We're wrapping our underlying data source with lazy one so that connection is not retrieved from the pool unless-->
  <!--it's really necessary. E.g. if Hibernate hits only cache, there is no need to fetch connection, but without lazy-->
  <!--data source, it will be actually fetched if service methods are marked with @Transactional-->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
    <property name="defaultTransactionIsolationName" value="TRANSACTION_READ_COMMITTED"/>
    <property name="defaultAutoCommit" value="false"/>
    <property name="targetDataSource">
      <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="acquireRetryAttempts" value="1"/>
        <!--Every hour we'll be hitting DB to make sure MySQL doesn't kill the connection. By default if connection
            is idle for 8 hrs, MySQL kills it-->
        <property name="idleConnectionTestPeriod" value="3600"/>
        <!--This option is useful if threads are waiting for the connection from pool. Without this threads would wait
        forever and you're risking to get your app down if all the threads stuck.-->
        <property name="checkoutTimeout" value="10000"/>
      </bean>
    </property>
  </bean>

  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
    <property name="validateExistingTransaction" value="true"/>
  </bean>

  <bean id="userDao" class="org.javatalks.training.hibernate.springdao.UserSpringJdbcDao">
    <constructor-arg index="0" ref="jdbcTemplate"/>
    <constructor-arg index="1" ref="springDao"/>
  </bean>
  <bean id="libraryDao" class="org.javatalks.training.hibernate.springdao.LibrarySpringJdbcDao">
    <constructor-arg index="0" ref="userDao"/>
    <constructor-arg index="1" ref="jdbcTemplate"/>
  </bean>
  <bean id="springDao" class="org.javatalks.training.hibernate.springdao.BookSpringJdbcDao">
    <constructor-arg index="0" ref="jdbcTemplate"/>
  </bean>


  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <constructor-arg index="0" ref="dataSource"/>
  </bean>
  <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
    <property name="dataSource" ref="dataSource"/>
    <property name="changeLog" value="classpath:/org/javatalks/training/hibernate/dbschema/${dbname}/IncludeAll.xml"/>
  </bean>
</beans>